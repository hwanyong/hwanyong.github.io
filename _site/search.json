[
  
    {
      "title"    : "[CS: C/C++] 변수를 만든다는 것",
      "category" : "",
      "tags"     : "computer science, c/c++, assembly, and hardware",
      "url"      : "/2024/11/11/cs-about-make-variable/",
      "date"     : "Nov 11, 2024",
      "content"  : "변수를 만든다는 것은?  변수의 본질: 메모리 주소와의 관계          변수는 특정 메모리 영역을 가리키는 추상적 개념      변수 이름의 실제 의미: 메모리 주소에 대한 별칭        메모리 할당과 변수 생성          특정 메모리 영역에 데이터 저장      컴파일러가 변수 이름을 메모리 주소로 변환        변수 이름과 메모리 주소의 관계          변수 이름은 프로그래머를 위한 추상화      실제 메모리 접근은 주소를 통해 이루어짐        결론          변수 개념의 재정립: 메모리 주소에 대한 추상화      효율적인 메모리 관리의 중요성        다음 예고          그럼 메모리는 어떻게 관리되어 변수를 저장하는가?      변수가 저장하는 크기를 어떻게 정할까?      실제로 변환되는 과정을 보기!      변수와 메모리 관리에 대한 이해는 프로그래밍의 핵심 개념 중 하나입니다. 이러한 지식을 바탕으로 더 효율적이고 안정적인 코드를 작성할 수 있습니다. 또한, 메모리 누수와 같은 문제를 예방하고 디버깅 과정에서도 큰 도움이 됩니다.이러한 개념을 실제 프로그래밍에 적용할 때, 개발자는 변수의 생명주기와 범위를 더 잘 이해하게 됩니다. 예를 들어, 함수 호출 시 스택 프레임의 생성과 소멸 과정을 이해하면 재귀 함수의 동작 원리를 더 명확히 파악할 수 있습니다. 또한, 포인터와 참조 변수의 개념을 이해하면 복잡한 자료구조를 더 효과적으로 구현할 수 있게 됩니다.변수의 본질: 메모리 주소와의 관계변수는 프로그래밍에서 가장 기본적이면서도 중요한 개념 중 하나입니다. 그러나 변수의 본질을 이해하기 위해서는 메모리 주소와의 관계를 살펴볼 필요가 있습니다.변수는 특정 메모리 영역을 가리키는 추상적 개념변수는 단순히 값을 저장하는 ‘상자’가 아닙니다. 실제로 변수는 컴퓨터 메모리의 특정 영역을 가리키는 추상적인 개념입니다. 프로그래머가 변수를 선언하면, 컴퓨터는 메모리의 특정 부분을 해당 변수에 할당합니다.변수 이름의 실제 의미: 메모리 주소에 대한 별칭우리가 사용하는 변수 이름은 사실 메모리 주소에 대한 별칭입니다. 컴파일러나 인터프리터는 변수 이름을 해당하는 메모리 주소로 변환합니다. 이를 통해 프로그래머는 복잡한 메모리 주소를 직접 다루지 않고도 데이터를 쉽게 조작할 수 있습니다.메모리 할당과 변수 생성변수를 생성한다는 것은 실제로 메모리를 할당하고 관리하는 과정을 의미합니다.특정 메모리 영역에 데이터 저장변수를 선언하고 값을 할당할 때, 컴퓨터는 해당 데이터를 저장하기 위한 메모리 영역을 확보합니다. 이 과정에서 데이터 타입에 따라 적절한 크기의 메모리가 할당됩니다.컴파일러가 변수 이름을 메모리 주소로 변환프로그램이 실행될 때, 컴파일러는 변수 이름을 해당 메모리 주소로 변환합니다. 이를 통해 프로그램은 변수에 저장된 데이터에 접근하고 조작할 수 있게 됩니다.변수 이름과 메모리 주소의 관계변수 이름과 실제 메모리 주소 사이의 관계를 이해하는 것은 프로그래밍의 핵심입니다.변수 이름은 프로그래머를 위한 추상화변수 이름은 프로그래머가 코드를 쉽게 이해하고 관리할 수 있도록 하는 추상화 도구입니다. 의미 있는 이름을 사용함으로써 코드의 가독성과 유지보수성을 높일 수 있습니다.실제 메모리 접근은 주소를 통해 이루어짐컴퓨터 내부에서는 변수 이름이 아닌 메모리 주소를 통해 데이터에 접근합니다. 이는 프로그램 실행의 효율성을 높이고 하드웨어 수준에서의 직접적인 제어를 가능하게 합니다.결론변수의 본질을 이해하는 것은 프로그래밍의 근본적인 개념을 파악하는 데 중요합니다.변수 개념의 재정립: 메모리 주소에 대한 추상화변수를 단순히 값을 저장하는 공간으로 생각하는 것에서 벗어나, 메모리 주소에 대한 추상화로 이해하는 것이 중요합니다. 이러한 관점은 프로그래밍의 더 깊은 이해와 효율적인 코드 작성을 가능하게 합니다.효율적인 메모리 관리의 중요성변수와 메모리의 관계를 이해함으로써, 프로그래머는 더 효율적인 메모리 관리 전략을 수립할 수 있습니다. 이는 특히 대규모 시스템이나 리소스가 제한된 환경에서 중요한 역할을 합니다.다음 예고변수와 메모리의 관계에 대한 이해를 바탕으로, 다음과 같은 주제들을 더 깊이 탐구해 볼 수 있습니다:그럼 메모리는 어떻게 관리되어 변수를 저장하는가?메모리 관리 시스템, 가비지 컬렉션, 메모리 누수 등의 개념을 살펴보며 변수가 실제로 어떻게 메모리에 저장되고 관리되는지 알아볼 수 있습니다.변수가 저장하는 크기를 어떻게 정할까?데이터 타입, 비트와 바이트, 메모리 정렬 등의 개념을 통해 변수가 저장하는 데이터의 크기와 그 결정 과정을 이해할 수 있습니다.실제로 변환되는 과정을 보기!C언어 코드가 전처리기 -&gt; 컴파일러 -&gt; 어셈블러 -&gt; 링커 -&gt; 실제 기계어 과정으로 변환되는 과정을 보면 직관적으로 이해할 수 있습니다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/11/11/cs-about-make-variable/'> <img src='/resources/post/cs_thumnail.png' alt='[CS: C/C++] 변수를 만든다는 것'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-11-11T16:00:00-08:00'>Nov 11, 2024</time> </span> </div><h2 class='article__title'>[CS: C/C++] 변수를 만든다는 것</h2> <p class='article__excerpt'>메모리 기반으로 변수가 만들어지는 과정을 알아보기</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Hwanyong Yoo'><img class='article__author-image' src='/images/users/uhd.jpg' alt='Hwanyong Yoo's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Hwanyong Yoo</a><span> in </span> <span class='article-tags'> <a href='/tag/computer science' class='article__tag'>computer science</a>  <a href='/tag/c/c++' class='article__tag'>c/c++</a>  <a href='/tag/assembly' class='article__tag'>assembly</a>  <a href='/tag/hardware' class='article__tag'>hardware</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Sprite Animate v1.1",
      "category" : "",
      "tags"     : "graphic engine, sprite, and v1.1",
      "url"      : "/2018/10/18/sprite-animate-v1.1/",
      "date"     : "Oct 18, 2018",
      "content"  : "Instructionssprite animation test  FPS: 30Update  Cheanged sprites image  Support multi row sprites image  Update graphic libraryCreditsDevelopment: HWANYONG YOO (UHD)  Game engine: Graphic (v1.0.181019 Self Made)  Published: Oct 19, 2018  Sources:          Spriters Resource: Hwanyong Yoo(self made)      Kenney Emotes Pack      SourceYou can see the source code in Inspector &gt; Sources &gt; sprite.jssprite.js'use strict';import Graphic from '../../../../Engine/1.0.181019/Graphic.js';import GameObject from '../../../../Engine/1.0.181019/GameObject.js';var BuilderIdle = new GameObject({	name: 'Builder-idle',	position: { x: 210, y: 143},	width: 192,	height: 192,	resource: {		type: 'sprite',		path: '/playground/public/Resources/Images/Builder-idle-v2-64px-8x2.png'	},	spriteOptions: {		x: 0,		y: 0,		width: 64,		height: 64,		interval: 80,		frame: {			length: 16,			row: 2,			col: 8		},		repeatMode: 'loop'	}}).setRender((ctx, self, opts) =&gt; {	ctx.drawImage(		opts.resource.img,		opts.animate.target.x,		opts.animate.target.y,		opts.spriteOptions.width,		opts.spriteOptions.height,		opts.position.x,		opts.position.y,		opts.width,		opts.height);});var Emotes = new GameObject({	name: 'Emotes',	position: { x: 270, y: 100},	width: 64,	height: 74,	resource: {		type: 'sprite',		path: '/playground/public/Resources/Images/kenney-emotes-pack.png'	},	spriteOptions: {		x: 0,		y: 0,		width: 32,		height: 38,		interval: 1000,		frame: {			length: 6,			row: 1,			col: 6		},		repeatMode: 'loop'	}}).setRender((ctx, self, opts) =&gt; {	ctx.drawImage(		opts.resource.img,		opts.animate.target.x,		opts.animate.target.y,		opts.spriteOptions.width,		opts.spriteOptions.height,		opts.position.x,		opts.position.y,		opts.width,		opts.height);});Graphic.SetBackgroundColor('#ffffff');BuilderIdle.startSprite();Emotes.startSprite();Graphic.addRenderList(BuilderIdle);Graphic.addRenderList(Emotes);",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2018/10/18/sprite-animate-v1.1/'> <img src='/resources/post/2018-10-19-sprite-animate-v1.1/img/thumnail.png' alt='Sprite Animate v1.1'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2018-10-18T17:00:00-07:00'>Oct 18, 2018</time> </span> </div><h2 class='article__title'>Sprite Animate v1.1</h2> <p class='article__excerpt'>Sprite animation test</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Hwanyong Yoo'><img class='article__author-image' src='/images/users/uhd.jpg' alt='Hwanyong Yoo's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Hwanyong Yoo</a><span> in </span> <span class='article-tags'> <a href='/tag/graphic engine' class='article__tag'>graphic engine</a>  <a href='/tag/sprite' class='article__tag'>sprite</a>  <a href='/tag/v1.1' class='article__tag'>v1.1</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Sprite Animate v1.0",
      "category" : "",
      "tags"     : "graphic engine, sprite, and v1.0",
      "url"      : "/2018/09/19/sprite-animate-v1.0/",
      "date"     : "Sep 19, 2018",
      "content"  : "Instructionssprite animation test  FPS: 30CreditsDevelopment: HWANYONG YOO (UHD)  Game engine: (none)  Published: Sep 20, 2018  Sources:          Spriters Resource      Kenney Emotes Pack      SourceYou can see the source code in Inspector &gt; Sources &gt; sprite.jssprite.js'use strict';import Graphic from '/resources/lib/Engine/1.0.180920/Graphic.js';import GameObject from '/resources/lib/Engine/1.0.180920/GameObject.js';var Bulbasaur = new GameObject({	name: 'Bulbasaur',	position: { x: 240, y: 174},	width: 160,	height: 148,	resource: {		type: 'sprite',		path: '/resources/post/2018-09-20-sprite-animate-v1.0/img/Pokemon - Bulbasaur_40by37.png'	},	spriteOptions: {		x: 1,		y: 0,		width: 40,		height: 37,		interval: 120,		frame: 21,		repeatMode: 'loop'	}});var Emotes = new GameObject({	name: 'Emotes',	position: { x: 280, y: 130},	width: 48,	height: 57,	resource: {		type: 'sprite',		path: '/resources/post/2018-09-20-sprite-animate-v1.0/img/kenney-emotes-pack.png'	},	spriteOptions: {		x: 0,		y: 0,		width: 32,		height: 38,		interval: 1000,		frame: 6,		repeatMode: 'loop'	}});Graphic.addRenderList(Emotes);Graphic.addRenderList(Bulbasaur);",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2018/09/19/sprite-animate-v1.0/'> <img src='/resources/post/2018-09-20-sprite-animate-v1.0/img/thumnail.png' alt='Sprite Animate v1.0'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2018-09-19T17:00:00-07:00'>Sep 19, 2018</time> </span> </div><h2 class='article__title'>Sprite Animate v1.0</h2> <p class='article__excerpt'>Sprite animation test</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Hwanyong Yoo'><img class='article__author-image' src='/images/users/uhd.jpg' alt='Hwanyong Yoo's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Hwanyong Yoo</a><span> in </span> <span class='article-tags'> <a href='/tag/graphic engine' class='article__tag'>graphic engine</a>  <a href='/tag/sprite' class='article__tag'>sprite</a>  <a href='/tag/v1.0' class='article__tag'>v1.0</a> </span></div></div></div></div></div>"
    } 
  
]
